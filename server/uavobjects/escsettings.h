/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup EscSettings EscSettings 
 * @brief Configuration settings for OP-ESC
 *
 * Autogenerated files and functions for EscSettings Object
 
 * @{ 
 *
 * @file       escsettings.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @brief      Implementation of the EscSettings object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: escsettings.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef ESCSETTINGS_H
#define ESCSETTINGS_H

// Object constants
#define ESCSETTINGS_OBJID 0x86F59D8
#define ESCSETTINGS_NAME "EscSettings"
#define ESCSETTINGS_METANAME "EscSettingsMeta"
#define ESCSETTINGS_ISSINGLEINST 1
#define ESCSETTINGS_ISSETTINGS 1
#define ESCSETTINGS_NUMBYTES sizeof(EscSettingsData)

// Object access macros
/**
 * @function EscSettingsGet(dataOut)
 * @brief Populate a EscSettingsData object
 * @param[out] dataOut 
 */
#define EscSettingsGet(dataOut) UAVObjGetData(EscSettingsHandle(), dataOut)
#define EscSettingsSet(dataIn) UAVObjSetData(EscSettingsHandle(), dataIn)
#define EscSettingsInstGet(instId, dataOut) UAVObjGetInstanceData(EscSettingsHandle(), instId, dataOut)
#define EscSettingsInstSet(instId, dataIn) UAVObjSetInstanceData(EscSettingsHandle(), instId, dataIn)
#define EscSettingsConnectQueue(queue) UAVObjConnectQueue(EscSettingsHandle(), queue, EV_MASK_ALL_UPDATES)
#define EscSettingsConnectCallback(cb) UAVObjConnectCallback(EscSettingsHandle(), cb, EV_MASK_ALL_UPDATES)
#define EscSettingsCreateInstance() UAVObjCreateInstance(EscSettingsHandle(),&EscSettingsSetDefaults)
#define EscSettingsRequestUpdate() UAVObjRequestUpdate(EscSettingsHandle())
#define EscSettingsRequestInstUpdate(instId) UAVObjRequestInstanceUpdate(EscSettingsHandle(), instId)
#define EscSettingsUpdated() UAVObjUpdated(EscSettingsHandle())
#define EscSettingsInstUpdated(instId) UAVObjUpdated(EscSettingsHandle(), instId)
#define EscSettingsGetMetadata(dataOut) UAVObjGetMetadata(EscSettingsHandle(), dataOut)
#define EscSettingsSetMetadata(dataIn) UAVObjSetMetadata(EscSettingsHandle(), dataIn)
#define EscSettingsReadOnly() UAVObjReadOnly(EscSettingsHandle())

// Object data
typedef struct {
    int16_t RisingKp;
    int16_t FallingKp;
    int16_t Ki;
    int16_t Kv;
    int16_t Kff2;
    int16_t ILim;
    uint16_t MaxError;
    int16_t MaxDcChange;
    int16_t MaxDc;
    int16_t MinDc;
    uint16_t InitialStartupSpeed;
    uint16_t FinalStartupSpeed;
    uint16_t StartupCurrentTarget;
    uint16_t SoftCurrentLimit;
    uint16_t HardCurrentLimit;
    int16_t CommutationPhase;
    int16_t CommutationOffset;
    uint16_t PwmMin;
    uint16_t PwmMax;
    uint16_t RpmMin;
    uint16_t RpmMax;
    uint16_t PwmFreq;
    uint8_t Braking;
    uint8_t Direction;

} __attribute__((packed)) EscSettingsData;

// Field information
// Field RisingKp information
// Field FallingKp information
// Field Ki information
// Field Kv information
// Field Kff2 information
// Field ILim information
// Field MaxError information
// Field MaxDcChange information
// Field MaxDc information
// Field MinDc information
// Field InitialStartupSpeed information
// Field FinalStartupSpeed information
// Field StartupCurrentTarget information
// Field SoftCurrentLimit information
// Field HardCurrentLimit information
// Field CommutationPhase information
// Field CommutationOffset information
// Field PwmMin information
// Field PwmMax information
// Field RpmMin information
// Field RpmMax information
// Field PwmFreq information
// Field Braking information
/* Enumeration options for field Braking */
typedef enum { ESCSETTINGS_BRAKING_OFF=0, ESCSETTINGS_BRAKING_ON=1 } EscSettingsBrakingOptions;
// Field Direction information
/* Enumeration options for field Direction */
typedef enum { ESCSETTINGS_DIRECTION_FORWARD=0, ESCSETTINGS_DIRECTION_REVERSE=1 } EscSettingsDirectionOptions;


// Generic interface functions
int32_t EscSettingsInitialize();
UAVObjHandle EscSettingsHandle();
void EscSettingsSetDefaults(UAVObjHandle obj, uint16_t instId);

// set/Get functions
extern void EscSettingsRisingKpSet( int16_t *NewRisingKp );
extern void EscSettingsRisingKpGet( int16_t *NewRisingKp );
extern void EscSettingsFallingKpSet( int16_t *NewFallingKp );
extern void EscSettingsFallingKpGet( int16_t *NewFallingKp );
extern void EscSettingsKiSet( int16_t *NewKi );
extern void EscSettingsKiGet( int16_t *NewKi );
extern void EscSettingsKvSet( int16_t *NewKv );
extern void EscSettingsKvGet( int16_t *NewKv );
extern void EscSettingsKff2Set( int16_t *NewKff2 );
extern void EscSettingsKff2Get( int16_t *NewKff2 );
extern void EscSettingsILimSet( int16_t *NewILim );
extern void EscSettingsILimGet( int16_t *NewILim );
extern void EscSettingsMaxErrorSet( uint16_t *NewMaxError );
extern void EscSettingsMaxErrorGet( uint16_t *NewMaxError );
extern void EscSettingsMaxDcChangeSet( int16_t *NewMaxDcChange );
extern void EscSettingsMaxDcChangeGet( int16_t *NewMaxDcChange );
extern void EscSettingsMaxDcSet( int16_t *NewMaxDc );
extern void EscSettingsMaxDcGet( int16_t *NewMaxDc );
extern void EscSettingsMinDcSet( int16_t *NewMinDc );
extern void EscSettingsMinDcGet( int16_t *NewMinDc );
extern void EscSettingsInitialStartupSpeedSet( uint16_t *NewInitialStartupSpeed );
extern void EscSettingsInitialStartupSpeedGet( uint16_t *NewInitialStartupSpeed );
extern void EscSettingsFinalStartupSpeedSet( uint16_t *NewFinalStartupSpeed );
extern void EscSettingsFinalStartupSpeedGet( uint16_t *NewFinalStartupSpeed );
extern void EscSettingsStartupCurrentTargetSet( uint16_t *NewStartupCurrentTarget );
extern void EscSettingsStartupCurrentTargetGet( uint16_t *NewStartupCurrentTarget );
extern void EscSettingsSoftCurrentLimitSet( uint16_t *NewSoftCurrentLimit );
extern void EscSettingsSoftCurrentLimitGet( uint16_t *NewSoftCurrentLimit );
extern void EscSettingsHardCurrentLimitSet( uint16_t *NewHardCurrentLimit );
extern void EscSettingsHardCurrentLimitGet( uint16_t *NewHardCurrentLimit );
extern void EscSettingsCommutationPhaseSet( int16_t *NewCommutationPhase );
extern void EscSettingsCommutationPhaseGet( int16_t *NewCommutationPhase );
extern void EscSettingsCommutationOffsetSet( int16_t *NewCommutationOffset );
extern void EscSettingsCommutationOffsetGet( int16_t *NewCommutationOffset );
extern void EscSettingsPwmMinSet( uint16_t *NewPwmMin );
extern void EscSettingsPwmMinGet( uint16_t *NewPwmMin );
extern void EscSettingsPwmMaxSet( uint16_t *NewPwmMax );
extern void EscSettingsPwmMaxGet( uint16_t *NewPwmMax );
extern void EscSettingsRpmMinSet( uint16_t *NewRpmMin );
extern void EscSettingsRpmMinGet( uint16_t *NewRpmMin );
extern void EscSettingsRpmMaxSet( uint16_t *NewRpmMax );
extern void EscSettingsRpmMaxGet( uint16_t *NewRpmMax );
extern void EscSettingsPwmFreqSet( uint16_t *NewPwmFreq );
extern void EscSettingsPwmFreqGet( uint16_t *NewPwmFreq );
extern void EscSettingsBrakingSet( uint8_t *NewBraking );
extern void EscSettingsBrakingGet( uint8_t *NewBraking );
extern void EscSettingsDirectionSet( uint8_t *NewDirection );
extern void EscSettingsDirectionGet( uint8_t *NewDirection );


#endif // ESCSETTINGS_H

/**
 * @}
 * @}
 */
