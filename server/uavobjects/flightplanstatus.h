/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup FlightPlanStatus FlightPlanStatus 
 * @brief Status of the flight plan script
 *
 * Autogenerated files and functions for FlightPlanStatus Object
 
 * @{ 
 *
 * @file       flightplanstatus.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @brief      Implementation of the FlightPlanStatus object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: flightplanstatus.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef FLIGHTPLANSTATUS_H
#define FLIGHTPLANSTATUS_H

// Object constants
#define FLIGHTPLANSTATUS_OBJID 0x2206EE46
#define FLIGHTPLANSTATUS_NAME "FlightPlanStatus"
#define FLIGHTPLANSTATUS_METANAME "FlightPlanStatusMeta"
#define FLIGHTPLANSTATUS_ISSINGLEINST 1
#define FLIGHTPLANSTATUS_ISSETTINGS 0
#define FLIGHTPLANSTATUS_NUMBYTES sizeof(FlightPlanStatusData)

// Object access macros
/**
 * @function FlightPlanStatusGet(dataOut)
 * @brief Populate a FlightPlanStatusData object
 * @param[out] dataOut 
 */
#define FlightPlanStatusGet(dataOut) UAVObjGetData(FlightPlanStatusHandle(), dataOut)
#define FlightPlanStatusSet(dataIn) UAVObjSetData(FlightPlanStatusHandle(), dataIn)
#define FlightPlanStatusInstGet(instId, dataOut) UAVObjGetInstanceData(FlightPlanStatusHandle(), instId, dataOut)
#define FlightPlanStatusInstSet(instId, dataIn) UAVObjSetInstanceData(FlightPlanStatusHandle(), instId, dataIn)
#define FlightPlanStatusConnectQueue(queue) UAVObjConnectQueue(FlightPlanStatusHandle(), queue, EV_MASK_ALL_UPDATES)
#define FlightPlanStatusConnectCallback(cb) UAVObjConnectCallback(FlightPlanStatusHandle(), cb, EV_MASK_ALL_UPDATES)
#define FlightPlanStatusCreateInstance() UAVObjCreateInstance(FlightPlanStatusHandle(),&FlightPlanStatusSetDefaults)
#define FlightPlanStatusRequestUpdate() UAVObjRequestUpdate(FlightPlanStatusHandle())
#define FlightPlanStatusRequestInstUpdate(instId) UAVObjRequestInstanceUpdate(FlightPlanStatusHandle(), instId)
#define FlightPlanStatusUpdated() UAVObjUpdated(FlightPlanStatusHandle())
#define FlightPlanStatusInstUpdated(instId) UAVObjUpdated(FlightPlanStatusHandle(), instId)
#define FlightPlanStatusGetMetadata(dataOut) UAVObjGetMetadata(FlightPlanStatusHandle(), dataOut)
#define FlightPlanStatusSetMetadata(dataIn) UAVObjSetMetadata(FlightPlanStatusHandle(), dataIn)
#define FlightPlanStatusReadOnly() UAVObjReadOnly(FlightPlanStatusHandle())

// Object data
typedef struct {
    uint32_t ErrorFileID;
    uint32_t ErrorLineNum;
    float Debug[2];
    uint8_t Status;
    uint8_t ErrorType;

} __attribute__((packed)) FlightPlanStatusData;

// Field information
// Field ErrorFileID information
// Field ErrorLineNum information
// Field Debug information
/* Number of elements for field Debug */
#define FLIGHTPLANSTATUS_DEBUG_NUMELEM 2
// Field Status information
/* Enumeration options for field Status */
typedef enum { FLIGHTPLANSTATUS_STATUS_STOPPED=0, FLIGHTPLANSTATUS_STATUS_RUNNING=1, FLIGHTPLANSTATUS_STATUS_ERROR=2 } FlightPlanStatusStatusOptions;
// Field ErrorType information
/* Enumeration options for field ErrorType */
typedef enum { FLIGHTPLANSTATUS_ERRORTYPE_NONE=0, FLIGHTPLANSTATUS_ERRORTYPE_VMINITERROR=1, FLIGHTPLANSTATUS_ERRORTYPE_EXCEPTION=2, FLIGHTPLANSTATUS_ERRORTYPE_IOERROR=3, FLIGHTPLANSTATUS_ERRORTYPE_DIVBYZERO=4, FLIGHTPLANSTATUS_ERRORTYPE_ASSERTERROR=5, FLIGHTPLANSTATUS_ERRORTYPE_ATTRIBUTEERROR=6, FLIGHTPLANSTATUS_ERRORTYPE_IMPORTERROR=7, FLIGHTPLANSTATUS_ERRORTYPE_INDEXERROR=8, FLIGHTPLANSTATUS_ERRORTYPE_KEYERROR=9, FLIGHTPLANSTATUS_ERRORTYPE_MEMORYERROR=10, FLIGHTPLANSTATUS_ERRORTYPE_NAMEERROR=11, FLIGHTPLANSTATUS_ERRORTYPE_SYNTAXERROR=12, FLIGHTPLANSTATUS_ERRORTYPE_SYSTEMERROR=13, FLIGHTPLANSTATUS_ERRORTYPE_TYPEERROR=14, FLIGHTPLANSTATUS_ERRORTYPE_VALUEERROR=15, FLIGHTPLANSTATUS_ERRORTYPE_STOPITERATION=16, FLIGHTPLANSTATUS_ERRORTYPE_WARNING=17, FLIGHTPLANSTATUS_ERRORTYPE_UNKNOWNERROR=18 } FlightPlanStatusErrorTypeOptions;


// Generic interface functions
int32_t FlightPlanStatusInitialize();
UAVObjHandle FlightPlanStatusHandle();
void FlightPlanStatusSetDefaults(UAVObjHandle obj, uint16_t instId);

// set/Get functions
extern void FlightPlanStatusErrorFileIDSet( uint32_t *NewErrorFileID );
extern void FlightPlanStatusErrorFileIDGet( uint32_t *NewErrorFileID );
extern void FlightPlanStatusErrorLineNumSet( uint32_t *NewErrorLineNum );
extern void FlightPlanStatusErrorLineNumGet( uint32_t *NewErrorLineNum );
extern void FlightPlanStatusDebugSet( float *NewDebug );
extern void FlightPlanStatusDebugGet( float *NewDebug );
extern void FlightPlanStatusStatusSet( uint8_t *NewStatus );
extern void FlightPlanStatusStatusGet( uint8_t *NewStatus );
extern void FlightPlanStatusErrorTypeSet( uint8_t *NewErrorType );
extern void FlightPlanStatusErrorTypeGet( uint8_t *NewErrorType );


#endif // FLIGHTPLANSTATUS_H

/**
 * @}
 * @}
 */
