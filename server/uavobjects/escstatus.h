/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup EscStatus EscStatus 
 * @brief Various information from ESC.
 *
 * Autogenerated files and functions for EscStatus Object
 
 * @{ 
 *
 * @file       escstatus.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @brief      Implementation of the EscStatus object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: escstatus.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef ESCSTATUS_H
#define ESCSTATUS_H

// Object constants
#define ESCSTATUS_OBJID 0xFFB3CA0A
#define ESCSTATUS_NAME "EscStatus"
#define ESCSTATUS_METANAME "EscStatusMeta"
#define ESCSTATUS_ISSINGLEINST 0
#define ESCSTATUS_ISSETTINGS 0
#define ESCSTATUS_NUMBYTES sizeof(EscStatusData)

// Object access macros
/**
 * @function EscStatusGet(dataOut)
 * @brief Populate a EscStatusData object
 * @param[out] dataOut 
 */
#define EscStatusGet(dataOut) UAVObjGetData(EscStatusHandle(), dataOut)
#define EscStatusSet(dataIn) UAVObjSetData(EscStatusHandle(), dataIn)
#define EscStatusInstGet(instId, dataOut) UAVObjGetInstanceData(EscStatusHandle(), instId, dataOut)
#define EscStatusInstSet(instId, dataIn) UAVObjSetInstanceData(EscStatusHandle(), instId, dataIn)
#define EscStatusConnectQueue(queue) UAVObjConnectQueue(EscStatusHandle(), queue, EV_MASK_ALL_UPDATES)
#define EscStatusConnectCallback(cb) UAVObjConnectCallback(EscStatusHandle(), cb, EV_MASK_ALL_UPDATES)
#define EscStatusCreateInstance() UAVObjCreateInstance(EscStatusHandle(),&EscStatusSetDefaults)
#define EscStatusRequestUpdate() UAVObjRequestUpdate(EscStatusHandle())
#define EscStatusRequestInstUpdate(instId) UAVObjRequestInstanceUpdate(EscStatusHandle(), instId)
#define EscStatusUpdated() UAVObjUpdated(EscStatusHandle())
#define EscStatusInstUpdated(instId) UAVObjUpdated(EscStatusHandle(), instId)
#define EscStatusGetMetadata(dataOut) UAVObjGetMetadata(EscStatusHandle(), dataOut)
#define EscStatusSetMetadata(dataIn) UAVObjSetMetadata(EscStatusHandle(), dataIn)
#define EscStatusReadOnly() UAVObjReadOnly(EscStatusHandle())

// Object data
typedef struct {
    int16_t SpeedSetpoint;
    uint16_t CurrentSpeed;
    uint16_t Current;
    uint16_t TotalCurrent;
    int16_t Kv;
    uint16_t Battery;
    uint16_t TotalMissed;
    uint8_t DutyCycle;
    uint8_t ZcdFraction;
    uint8_t Error;

} __attribute__((packed)) EscStatusData;

// Field information
// Field SpeedSetpoint information
// Field CurrentSpeed information
// Field Current information
// Field TotalCurrent information
// Field Kv information
// Field Battery information
// Field TotalMissed information
// Field DutyCycle information
// Field ZcdFraction information
// Field Error information
/* Enumeration options for field Error */
typedef enum { ESCSTATUS_ERROR_NONE=0, ESCSTATUS_ERROR_FAULT=1, ESCSTATUS_ERROR_STARTUP=2, ESCSTATUS_ERROR_MANYMISSED=3, ESCSTATUS_ERROR_HIGH_A_FET=4, ESCSTATUS_ERROR_LOW_A_FET=5, ESCSTATUS_ERROR_HIGH_B_FET=6, ESCSTATUS_ERROR_LOW_B_FET=7, ESCSTATUS_ERROR_HIGH_C_FET=8, ESCSTATUS_ERROR_LOW_C_FET=9, ESCSTATUS_ERROR_NO_MOTOR=10 } EscStatusErrorOptions;


// Generic interface functions
int32_t EscStatusInitialize();
UAVObjHandle EscStatusHandle();
void EscStatusSetDefaults(UAVObjHandle obj, uint16_t instId);

// set/Get functions
extern void EscStatusSpeedSetpointSet( int16_t *NewSpeedSetpoint );
extern void EscStatusSpeedSetpointGet( int16_t *NewSpeedSetpoint );
extern void EscStatusCurrentSpeedSet( uint16_t *NewCurrentSpeed );
extern void EscStatusCurrentSpeedGet( uint16_t *NewCurrentSpeed );
extern void EscStatusCurrentSet( uint16_t *NewCurrent );
extern void EscStatusCurrentGet( uint16_t *NewCurrent );
extern void EscStatusTotalCurrentSet( uint16_t *NewTotalCurrent );
extern void EscStatusTotalCurrentGet( uint16_t *NewTotalCurrent );
extern void EscStatusKvSet( int16_t *NewKv );
extern void EscStatusKvGet( int16_t *NewKv );
extern void EscStatusBatterySet( uint16_t *NewBattery );
extern void EscStatusBatteryGet( uint16_t *NewBattery );
extern void EscStatusTotalMissedSet( uint16_t *NewTotalMissed );
extern void EscStatusTotalMissedGet( uint16_t *NewTotalMissed );
extern void EscStatusDutyCycleSet( uint8_t *NewDutyCycle );
extern void EscStatusDutyCycleGet( uint8_t *NewDutyCycle );
extern void EscStatusZcdFractionSet( uint8_t *NewZcdFraction );
extern void EscStatusZcdFractionGet( uint8_t *NewZcdFraction );
extern void EscStatusErrorSet( uint8_t *NewError );
extern void EscStatusErrorGet( uint8_t *NewError );


#endif // ESCSTATUS_H

/**
 * @}
 * @}
 */
