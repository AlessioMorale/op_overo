/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup FaultSettings FaultSettings 
 * @brief Allows testers to simulate various fault scenarios.
 *
 * Autogenerated files and functions for FaultSettings Object
 
 * @{ 
 *
 * @file       faultsettings.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @brief      Implementation of the FaultSettings object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: faultsettings.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef FAULTSETTINGS_H
#define FAULTSETTINGS_H

// Object constants
#define FAULTSETTINGS_OBJID 0x2778BA3C
#define FAULTSETTINGS_ISSINGLEINST 1
#define FAULTSETTINGS_ISSETTINGS 1
#define FAULTSETTINGS_NUMBYTES sizeof(FaultSettingsData)

// Object access macros
/**
 * @function FaultSettingsGet(dataOut)
 * @brief Populate a FaultSettingsData object
 * @param[out] dataOut 
 */
#define FaultSettingsGet(dataOut) UAVObjGetData(FaultSettingsHandle(), dataOut)
#define FaultSettingsSet(dataIn) UAVObjSetData(FaultSettingsHandle(), dataIn)
#define FaultSettingsInstGet(instId, dataOut) UAVObjGetInstanceData(FaultSettingsHandle(), instId, dataOut)
#define FaultSettingsInstSet(instId, dataIn) UAVObjSetInstanceData(FaultSettingsHandle(), instId, dataIn)
#define FaultSettingsConnectQueue(queue) UAVObjConnectQueue(FaultSettingsHandle(), queue, EV_MASK_ALL_UPDATES)
#define FaultSettingsConnectCallback(cb) UAVObjConnectCallback(FaultSettingsHandle(), cb, EV_MASK_ALL_UPDATES)
#define FaultSettingsCreateInstance() UAVObjCreateInstance(FaultSettingsHandle(),&FaultSettingsSetDefaults)
#define FaultSettingsRequestUpdate() UAVObjRequestUpdate(FaultSettingsHandle())
#define FaultSettingsRequestInstUpdate(instId) UAVObjRequestInstanceUpdate(FaultSettingsHandle(), instId)
#define FaultSettingsUpdated() UAVObjUpdated(FaultSettingsHandle())
#define FaultSettingsInstUpdated(instId) UAVObjUpdated(FaultSettingsHandle(), instId)
#define FaultSettingsGetMetadata(dataOut) UAVObjGetMetadata(FaultSettingsHandle(), dataOut)
#define FaultSettingsSetMetadata(dataIn) UAVObjSetMetadata(FaultSettingsHandle(), dataIn)
#define FaultSettingsReadOnly() UAVObjReadOnly(FaultSettingsHandle())

// Object data
typedef struct {
    uint8_t ActivateFault;

} __attribute__((packed)) FaultSettingsData;

// Field information
// Field ActivateFault information
/* Enumeration options for field ActivateFault */
typedef enum { FAULTSETTINGS_ACTIVATEFAULT_NOFAULT=0, FAULTSETTINGS_ACTIVATEFAULT_MODULEINITASSERT=1, FAULTSETTINGS_ACTIVATEFAULT_INITOUTOFMEMORY=2, FAULTSETTINGS_ACTIVATEFAULT_INITBUSERROR=3, FAULTSETTINGS_ACTIVATEFAULT_RUNAWAYTASK=4, FAULTSETTINGS_ACTIVATEFAULT_TASKOUTOFMEMORY=5 } FaultSettingsActivateFaultOptions;


// Generic interface functions
int32_t FaultSettingsInitialize();
UAVObjHandle FaultSettingsHandle();
void FaultSettingsSetDefaults(UAVObjHandle obj, uint16_t instId);

// set/Get functions
extern void FaultSettingsActivateFaultSet( uint8_t *NewActivateFault );
extern void FaultSettingsActivateFaultGet( uint8_t *NewActivateFault );


#endif // FAULTSETTINGS_H

/**
 * @}
 * @}
 */
