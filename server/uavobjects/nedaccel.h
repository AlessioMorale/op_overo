/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup NedAccel NedAccel 
 * @brief The projection of acceleration in the NED reference frame used by @ref Guidance.
 *
 * Autogenerated files and functions for NedAccel Object
 
 * @{ 
 *
 * @file       nedaccel.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @brief      Implementation of the NedAccel object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: nedaccel.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef NEDACCEL_H
#define NEDACCEL_H

// Object constants
#define NEDACCEL_OBJID 0x7C7F5BC0
#define NEDACCEL_ISSINGLEINST 1
#define NEDACCEL_ISSETTINGS 0
#define NEDACCEL_NUMBYTES sizeof(NedAccelData)

// Object access macros
/**
 * @function NedAccelGet(dataOut)
 * @brief Populate a NedAccelData object
 * @param[out] dataOut 
 */
#define NedAccelGet(dataOut) UAVObjGetData(NedAccelHandle(), dataOut)
#define NedAccelSet(dataIn) UAVObjSetData(NedAccelHandle(), dataIn)
#define NedAccelInstGet(instId, dataOut) UAVObjGetInstanceData(NedAccelHandle(), instId, dataOut)
#define NedAccelInstSet(instId, dataIn) UAVObjSetInstanceData(NedAccelHandle(), instId, dataIn)
#define NedAccelConnectQueue(queue) UAVObjConnectQueue(NedAccelHandle(), queue, EV_MASK_ALL_UPDATES)
#define NedAccelConnectCallback(cb) UAVObjConnectCallback(NedAccelHandle(), cb, EV_MASK_ALL_UPDATES)
#define NedAccelCreateInstance() UAVObjCreateInstance(NedAccelHandle(),&NedAccelSetDefaults)
#define NedAccelRequestUpdate() UAVObjRequestUpdate(NedAccelHandle())
#define NedAccelRequestInstUpdate(instId) UAVObjRequestInstanceUpdate(NedAccelHandle(), instId)
#define NedAccelUpdated() UAVObjUpdated(NedAccelHandle())
#define NedAccelInstUpdated(instId) UAVObjUpdated(NedAccelHandle(), instId)
#define NedAccelGetMetadata(dataOut) UAVObjGetMetadata(NedAccelHandle(), dataOut)
#define NedAccelSetMetadata(dataIn) UAVObjSetMetadata(NedAccelHandle(), dataIn)
#define NedAccelReadOnly() UAVObjReadOnly(NedAccelHandle())

// Object data
typedef struct {
    float North;
    float East;
    float Down;

} __attribute__((packed)) NedAccelData;

// Field information
// Field North information
// Field East information
// Field Down information


// Generic interface functions
int32_t NedAccelInitialize();
UAVObjHandle NedAccelHandle();
void NedAccelSetDefaults(UAVObjHandle obj, uint16_t instId);

// set/Get functions
extern void NedAccelNorthSet( float *NewNorth );
extern void NedAccelNorthGet( float *NewNorth );
extern void NedAccelEastSet( float *NewEast );
extern void NedAccelEastGet( float *NewEast );
extern void NedAccelDownSet( float *NewDown );
extern void NedAccelDownGet( float *NewDown );


#endif // NEDACCEL_H

/**
 * @}
 * @}
 */
