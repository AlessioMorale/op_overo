/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup NEDPosition NEDPosition 
 * @brief Contains the current position relative to @ref HomeLocation
 *
 * Autogenerated files and functions for NEDPosition Object
 
 * @{ 
 *
 * @file       nedposition.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @brief      Implementation of the NEDPosition object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: nedposition.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef NEDPOSITION_H
#define NEDPOSITION_H

// Object constants
#define NEDPOSITION_OBJID 0x1FB15A00
#define NEDPOSITION_ISSINGLEINST 1
#define NEDPOSITION_ISSETTINGS 0
#define NEDPOSITION_NUMBYTES sizeof(NEDPositionData)

// Object access macros
/**
 * @function NEDPositionGet(dataOut)
 * @brief Populate a NEDPositionData object
 * @param[out] dataOut 
 */
#define NEDPositionGet(dataOut) UAVObjGetData(NEDPositionHandle(), dataOut)
#define NEDPositionSet(dataIn) UAVObjSetData(NEDPositionHandle(), dataIn)
#define NEDPositionInstGet(instId, dataOut) UAVObjGetInstanceData(NEDPositionHandle(), instId, dataOut)
#define NEDPositionInstSet(instId, dataIn) UAVObjSetInstanceData(NEDPositionHandle(), instId, dataIn)
#define NEDPositionConnectQueue(queue) UAVObjConnectQueue(NEDPositionHandle(), queue, EV_MASK_ALL_UPDATES)
#define NEDPositionConnectCallback(cb) UAVObjConnectCallback(NEDPositionHandle(), cb, EV_MASK_ALL_UPDATES)
#define NEDPositionCreateInstance() UAVObjCreateInstance(NEDPositionHandle(),&NEDPositionSetDefaults)
#define NEDPositionRequestUpdate() UAVObjRequestUpdate(NEDPositionHandle())
#define NEDPositionRequestInstUpdate(instId) UAVObjRequestInstanceUpdate(NEDPositionHandle(), instId)
#define NEDPositionUpdated() UAVObjUpdated(NEDPositionHandle())
#define NEDPositionInstUpdated(instId) UAVObjUpdated(NEDPositionHandle(), instId)
#define NEDPositionGetMetadata(dataOut) UAVObjGetMetadata(NEDPositionHandle(), dataOut)
#define NEDPositionSetMetadata(dataIn) UAVObjSetMetadata(NEDPositionHandle(), dataIn)
#define NEDPositionReadOnly() UAVObjReadOnly(NEDPositionHandle())

// Object data
typedef struct {
    float North;
    float East;
    float Down;

} __attribute__((packed)) NEDPositionData;

// Field information
// Field North information
// Field East information
// Field Down information


// Generic interface functions
int32_t NEDPositionInitialize();
UAVObjHandle NEDPositionHandle();
void NEDPositionSetDefaults(UAVObjHandle obj, uint16_t instId);

// set/Get functions
extern void NEDPositionNorthSet( float *NewNorth );
extern void NEDPositionNorthGet( float *NewNorth );
extern void NEDPositionEastSet( float *NewEast );
extern void NEDPositionEastGet( float *NewEast );
extern void NEDPositionDownSet( float *NewDown );
extern void NEDPositionDownGet( float *NewDown );


#endif // NEDPOSITION_H

/**
 * @}
 * @}
 */
