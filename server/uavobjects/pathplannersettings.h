/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup PathPlannerSettings PathPlannerSettings 
 * @brief Settings for the @ref PathPlanner Module
 *
 * Autogenerated files and functions for PathPlannerSettings Object
 
 * @{ 
 *
 * @file       pathplannersettings.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @brief      Implementation of the PathPlannerSettings object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: pathplannersettings.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef PATHPLANNERSETTINGS_H
#define PATHPLANNERSETTINGS_H

// Object constants
#define PATHPLANNERSETTINGS_OBJID 0x290E45DA
#define PATHPLANNERSETTINGS_ISSINGLEINST 1
#define PATHPLANNERSETTINGS_ISSETTINGS 1
#define PATHPLANNERSETTINGS_NUMBYTES sizeof(PathPlannerSettingsData)

// Object access macros
/**
 * @function PathPlannerSettingsGet(dataOut)
 * @brief Populate a PathPlannerSettingsData object
 * @param[out] dataOut 
 */
#define PathPlannerSettingsGet(dataOut) UAVObjGetData(PathPlannerSettingsHandle(), dataOut)
#define PathPlannerSettingsSet(dataIn) UAVObjSetData(PathPlannerSettingsHandle(), dataIn)
#define PathPlannerSettingsInstGet(instId, dataOut) UAVObjGetInstanceData(PathPlannerSettingsHandle(), instId, dataOut)
#define PathPlannerSettingsInstSet(instId, dataIn) UAVObjSetInstanceData(PathPlannerSettingsHandle(), instId, dataIn)
#define PathPlannerSettingsConnectQueue(queue) UAVObjConnectQueue(PathPlannerSettingsHandle(), queue, EV_MASK_ALL_UPDATES)
#define PathPlannerSettingsConnectCallback(cb) UAVObjConnectCallback(PathPlannerSettingsHandle(), cb, EV_MASK_ALL_UPDATES)
#define PathPlannerSettingsCreateInstance() UAVObjCreateInstance(PathPlannerSettingsHandle(),&PathPlannerSettingsSetDefaults)
#define PathPlannerSettingsRequestUpdate() UAVObjRequestUpdate(PathPlannerSettingsHandle())
#define PathPlannerSettingsRequestInstUpdate(instId) UAVObjRequestInstanceUpdate(PathPlannerSettingsHandle(), instId)
#define PathPlannerSettingsUpdated() UAVObjUpdated(PathPlannerSettingsHandle())
#define PathPlannerSettingsInstUpdated(instId) UAVObjUpdated(PathPlannerSettingsHandle(), instId)
#define PathPlannerSettingsGetMetadata(dataOut) UAVObjGetMetadata(PathPlannerSettingsHandle(), dataOut)
#define PathPlannerSettingsSetMetadata(dataIn) UAVObjSetMetadata(PathPlannerSettingsHandle(), dataIn)
#define PathPlannerSettingsReadOnly() UAVObjReadOnly(PathPlannerSettingsHandle())

// Object data
typedef struct {
    uint8_t PathMode;
    uint8_t PreprogrammedPath;

} __attribute__((packed)) PathPlannerSettingsData;

// Field information
// Field PathMode information
/* Enumeration options for field PathMode */
typedef enum { PATHPLANNERSETTINGS_PATHMODE_ENDPOINT=0, PATHPLANNERSETTINGS_PATHMODE_PATH=1 } PathPlannerSettingsPathModeOptions;
// Field PreprogrammedPath information
/* Enumeration options for field PreprogrammedPath */
typedef enum { PATHPLANNERSETTINGS_PREPROGRAMMEDPATH_NONE=0, PATHPLANNERSETTINGS_PREPROGRAMMEDPATH_10M_BOX=1, PATHPLANNERSETTINGS_PREPROGRAMMEDPATH_LOGO=2 } PathPlannerSettingsPreprogrammedPathOptions;


// Generic interface functions
int32_t PathPlannerSettingsInitialize();
UAVObjHandle PathPlannerSettingsHandle();
void PathPlannerSettingsSetDefaults(UAVObjHandle obj, uint16_t instId);

// set/Get functions
extern void PathPlannerSettingsPathModeSet( uint8_t *NewPathMode );
extern void PathPlannerSettingsPathModeGet( uint8_t *NewPathMode );
extern void PathPlannerSettingsPreprogrammedPathSet( uint8_t *NewPreprogrammedPath );
extern void PathPlannerSettingsPreprogrammedPathGet( uint8_t *NewPreprogrammedPath );


#endif // PATHPLANNERSETTINGS_H

/**
 * @}
 * @}
 */
