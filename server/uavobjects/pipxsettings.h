/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup PipXSettings PipXSettings 
 * @brief PipXtreme configurations options.
 *
 * Autogenerated files and functions for PipXSettings Object
 
 * @{ 
 *
 * @file       pipxsettings.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @brief      Implementation of the PipXSettings object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: pipxsettings.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef PIPXSETTINGS_H
#define PIPXSETTINGS_H

// Object constants
#define PIPXSETTINGS_OBJID 0x728F975C
#define PIPXSETTINGS_ISSINGLEINST 1
#define PIPXSETTINGS_ISSETTINGS 1
#define PIPXSETTINGS_NUMBYTES sizeof(PipXSettingsData)

// Object access macros
/**
 * @function PipXSettingsGet(dataOut)
 * @brief Populate a PipXSettingsData object
 * @param[out] dataOut 
 */
#define PipXSettingsGet(dataOut) UAVObjGetData(PipXSettingsHandle(), dataOut)
#define PipXSettingsSet(dataIn) UAVObjSetData(PipXSettingsHandle(), dataIn)
#define PipXSettingsInstGet(instId, dataOut) UAVObjGetInstanceData(PipXSettingsHandle(), instId, dataOut)
#define PipXSettingsInstSet(instId, dataIn) UAVObjSetInstanceData(PipXSettingsHandle(), instId, dataIn)
#define PipXSettingsConnectQueue(queue) UAVObjConnectQueue(PipXSettingsHandle(), queue, EV_MASK_ALL_UPDATES)
#define PipXSettingsConnectCallback(cb) UAVObjConnectCallback(PipXSettingsHandle(), cb, EV_MASK_ALL_UPDATES)
#define PipXSettingsCreateInstance() UAVObjCreateInstance(PipXSettingsHandle(),&PipXSettingsSetDefaults)
#define PipXSettingsRequestUpdate() UAVObjRequestUpdate(PipXSettingsHandle())
#define PipXSettingsRequestInstUpdate(instId) UAVObjRequestInstanceUpdate(PipXSettingsHandle(), instId)
#define PipXSettingsUpdated() UAVObjUpdated(PipXSettingsHandle())
#define PipXSettingsInstUpdated(instId) UAVObjUpdated(PipXSettingsHandle(), instId)
#define PipXSettingsGetMetadata(dataOut) UAVObjGetMetadata(PipXSettingsHandle(), dataOut)
#define PipXSettingsSetMetadata(dataIn) UAVObjSetMetadata(PipXSettingsHandle(), dataIn)
#define PipXSettingsReadOnly() UAVObjReadOnly(PipXSettingsHandle())

// Object data
typedef struct {
    uint32_t PairID;
    uint32_t Frequency;
    uint16_t SendTimeout;
    uint8_t TelemetryConfig;
    uint8_t TelemetrySpeed;
    uint8_t FlexiConfig;
    uint8_t FlexiSpeed;
    uint8_t VCPConfig;
    uint8_t VCPSpeed;
    uint8_t RFSpeed;
    uint8_t MaxRFPower;
    uint8_t MinPacketSize;
    uint8_t FrequencyCalibration;
    uint8_t AESKey[32];

} __attribute__((packed)) PipXSettingsData;

// Field information
// Field PairID information
// Field Frequency information
// Field SendTimeout information
// Field TelemetryConfig information
/* Enumeration options for field TelemetryConfig */
typedef enum { PIPXSETTINGS_TELEMETRYCONFIG_DISABLED=0, PIPXSETTINGS_TELEMETRYCONFIG_SERIAL=1, PIPXSETTINGS_TELEMETRYCONFIG_UAVTALK=2, PIPXSETTINGS_TELEMETRYCONFIG_DEBUG=3 } PipXSettingsTelemetryConfigOptions;
// Field TelemetrySpeed information
/* Enumeration options for field TelemetrySpeed */
typedef enum { PIPXSETTINGS_TELEMETRYSPEED_2400=0, PIPXSETTINGS_TELEMETRYSPEED_4800=1, PIPXSETTINGS_TELEMETRYSPEED_9600=2, PIPXSETTINGS_TELEMETRYSPEED_19200=3, PIPXSETTINGS_TELEMETRYSPEED_38400=4, PIPXSETTINGS_TELEMETRYSPEED_57600=5, PIPXSETTINGS_TELEMETRYSPEED_115200=6 } PipXSettingsTelemetrySpeedOptions;
// Field FlexiConfig information
/* Enumeration options for field FlexiConfig */
typedef enum { PIPXSETTINGS_FLEXICONFIG_DISABLED=0, PIPXSETTINGS_FLEXICONFIG_SERIAL=1, PIPXSETTINGS_FLEXICONFIG_UAVTALK=2, PIPXSETTINGS_FLEXICONFIG_PPM_IN=3, PIPXSETTINGS_FLEXICONFIG_PPM_OUT=4, PIPXSETTINGS_FLEXICONFIG_RSSI=5, PIPXSETTINGS_FLEXICONFIG_DEBUG=6 } PipXSettingsFlexiConfigOptions;
// Field FlexiSpeed information
/* Enumeration options for field FlexiSpeed */
typedef enum { PIPXSETTINGS_FLEXISPEED_2400=0, PIPXSETTINGS_FLEXISPEED_4800=1, PIPXSETTINGS_FLEXISPEED_9600=2, PIPXSETTINGS_FLEXISPEED_19200=3, PIPXSETTINGS_FLEXISPEED_38400=4, PIPXSETTINGS_FLEXISPEED_57600=5, PIPXSETTINGS_FLEXISPEED_115200=6 } PipXSettingsFlexiSpeedOptions;
// Field VCPConfig information
/* Enumeration options for field VCPConfig */
typedef enum { PIPXSETTINGS_VCPCONFIG_DISABLED=0, PIPXSETTINGS_VCPCONFIG_SERIAL=1, PIPXSETTINGS_VCPCONFIG_DEBUG=2 } PipXSettingsVCPConfigOptions;
// Field VCPSpeed information
/* Enumeration options for field VCPSpeed */
typedef enum { PIPXSETTINGS_VCPSPEED_2400=0, PIPXSETTINGS_VCPSPEED_4800=1, PIPXSETTINGS_VCPSPEED_9600=2, PIPXSETTINGS_VCPSPEED_19200=3, PIPXSETTINGS_VCPSPEED_38400=4, PIPXSETTINGS_VCPSPEED_57600=5, PIPXSETTINGS_VCPSPEED_115200=6 } PipXSettingsVCPSpeedOptions;
// Field RFSpeed information
/* Enumeration options for field RFSpeed */
typedef enum { PIPXSETTINGS_RFSPEED_2400=0, PIPXSETTINGS_RFSPEED_4800=1, PIPXSETTINGS_RFSPEED_9600=2, PIPXSETTINGS_RFSPEED_19200=3, PIPXSETTINGS_RFSPEED_38400=4, PIPXSETTINGS_RFSPEED_57600=5, PIPXSETTINGS_RFSPEED_115200=6 } PipXSettingsRFSpeedOptions;
// Field MaxRFPower information
/* Enumeration options for field MaxRFPower */
typedef enum { PIPXSETTINGS_MAXRFPOWER_125=0, PIPXSETTINGS_MAXRFPOWER_16=1, PIPXSETTINGS_MAXRFPOWER_316=2, PIPXSETTINGS_MAXRFPOWER_63=3, PIPXSETTINGS_MAXRFPOWER_126=4, PIPXSETTINGS_MAXRFPOWER_25=5, PIPXSETTINGS_MAXRFPOWER_50=6, PIPXSETTINGS_MAXRFPOWER_100=7 } PipXSettingsMaxRFPowerOptions;
// Field MinPacketSize information
// Field FrequencyCalibration information
// Field AESKey information
/* Number of elements for field AESKey */
#define PIPXSETTINGS_AESKEY_NUMELEM 32


// Generic interface functions
int32_t PipXSettingsInitialize();
UAVObjHandle PipXSettingsHandle();
void PipXSettingsSetDefaults(UAVObjHandle obj, uint16_t instId);

// set/Get functions
extern void PipXSettingsPairIDSet( uint32_t *NewPairID );
extern void PipXSettingsPairIDGet( uint32_t *NewPairID );
extern void PipXSettingsFrequencySet( uint32_t *NewFrequency );
extern void PipXSettingsFrequencyGet( uint32_t *NewFrequency );
extern void PipXSettingsSendTimeoutSet( uint16_t *NewSendTimeout );
extern void PipXSettingsSendTimeoutGet( uint16_t *NewSendTimeout );
extern void PipXSettingsTelemetryConfigSet( uint8_t *NewTelemetryConfig );
extern void PipXSettingsTelemetryConfigGet( uint8_t *NewTelemetryConfig );
extern void PipXSettingsTelemetrySpeedSet( uint8_t *NewTelemetrySpeed );
extern void PipXSettingsTelemetrySpeedGet( uint8_t *NewTelemetrySpeed );
extern void PipXSettingsFlexiConfigSet( uint8_t *NewFlexiConfig );
extern void PipXSettingsFlexiConfigGet( uint8_t *NewFlexiConfig );
extern void PipXSettingsFlexiSpeedSet( uint8_t *NewFlexiSpeed );
extern void PipXSettingsFlexiSpeedGet( uint8_t *NewFlexiSpeed );
extern void PipXSettingsVCPConfigSet( uint8_t *NewVCPConfig );
extern void PipXSettingsVCPConfigGet( uint8_t *NewVCPConfig );
extern void PipXSettingsVCPSpeedSet( uint8_t *NewVCPSpeed );
extern void PipXSettingsVCPSpeedGet( uint8_t *NewVCPSpeed );
extern void PipXSettingsRFSpeedSet( uint8_t *NewRFSpeed );
extern void PipXSettingsRFSpeedGet( uint8_t *NewRFSpeed );
extern void PipXSettingsMaxRFPowerSet( uint8_t *NewMaxRFPower );
extern void PipXSettingsMaxRFPowerGet( uint8_t *NewMaxRFPower );
extern void PipXSettingsMinPacketSizeSet( uint8_t *NewMinPacketSize );
extern void PipXSettingsMinPacketSizeGet( uint8_t *NewMinPacketSize );
extern void PipXSettingsFrequencyCalibrationSet( uint8_t *NewFrequencyCalibration );
extern void PipXSettingsFrequencyCalibrationGet( uint8_t *NewFrequencyCalibration );
extern void PipXSettingsAESKeySet( uint8_t *NewAESKey );
extern void PipXSettingsAESKeyGet( uint8_t *NewAESKey );


#endif // PIPXSETTINGS_H

/**
 * @}
 * @}
 */
