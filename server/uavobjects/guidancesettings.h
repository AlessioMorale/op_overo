/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup GuidanceSettings GuidanceSettings 
 * @brief Settings for the @ref GuidanceModule
 *
 * Autogenerated files and functions for GuidanceSettings Object
 
 * @{ 
 *
 * @file       guidancesettings.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @brief      Implementation of the GuidanceSettings object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: guidancesettings.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef GUIDANCESETTINGS_H
#define GUIDANCESETTINGS_H

// Object constants
#define GUIDANCESETTINGS_OBJID 0x6EA79FB4
#define GUIDANCESETTINGS_NAME "GuidanceSettings"
#define GUIDANCESETTINGS_METANAME "GuidanceSettingsMeta"
#define GUIDANCESETTINGS_ISSINGLEINST 1
#define GUIDANCESETTINGS_ISSETTINGS 1
#define GUIDANCESETTINGS_NUMBYTES sizeof(GuidanceSettingsData)

// Object access macros
/**
 * @function GuidanceSettingsGet(dataOut)
 * @brief Populate a GuidanceSettingsData object
 * @param[out] dataOut 
 */
#define GuidanceSettingsGet(dataOut) UAVObjGetData(GuidanceSettingsHandle(), dataOut)
#define GuidanceSettingsSet(dataIn) UAVObjSetData(GuidanceSettingsHandle(), dataIn)
#define GuidanceSettingsInstGet(instId, dataOut) UAVObjGetInstanceData(GuidanceSettingsHandle(), instId, dataOut)
#define GuidanceSettingsInstSet(instId, dataIn) UAVObjSetInstanceData(GuidanceSettingsHandle(), instId, dataIn)
#define GuidanceSettingsConnectQueue(queue) UAVObjConnectQueue(GuidanceSettingsHandle(), queue, EV_MASK_ALL_UPDATES)
#define GuidanceSettingsConnectCallback(cb) UAVObjConnectCallback(GuidanceSettingsHandle(), cb, EV_MASK_ALL_UPDATES)
#define GuidanceSettingsCreateInstance() UAVObjCreateInstance(GuidanceSettingsHandle(),&GuidanceSettingsSetDefaults)
#define GuidanceSettingsRequestUpdate() UAVObjRequestUpdate(GuidanceSettingsHandle())
#define GuidanceSettingsRequestInstUpdate(instId) UAVObjRequestInstanceUpdate(GuidanceSettingsHandle(), instId)
#define GuidanceSettingsUpdated() UAVObjUpdated(GuidanceSettingsHandle())
#define GuidanceSettingsInstUpdated(instId) UAVObjUpdated(GuidanceSettingsHandle(), instId)
#define GuidanceSettingsGetMetadata(dataOut) UAVObjGetMetadata(GuidanceSettingsHandle(), dataOut)
#define GuidanceSettingsSetMetadata(dataIn) UAVObjSetMetadata(GuidanceSettingsHandle(), dataIn)
#define GuidanceSettingsReadOnly() UAVObjReadOnly(GuidanceSettingsHandle())

// Object data
typedef struct {
    float HorizontalPosPI[3];
    float HorizontalVelPID[4];
    float VerticalPosPI[3];
    float VerticalVelPID[4];
    float MaxRollPitch;
    int32_t UpdatePeriod;
    uint16_t HorizontalVelMax;
    uint16_t VerticalVelMax;
    uint8_t GuidanceMode;
    uint8_t ThrottleControl;

} __attribute__((packed)) GuidanceSettingsData;

// Field information
// Field HorizontalPosPI information
/* Array element names for field HorizontalPosPI */
typedef enum { GUIDANCESETTINGS_HORIZONTALPOSPI_KP=0, GUIDANCESETTINGS_HORIZONTALPOSPI_KI=1, GUIDANCESETTINGS_HORIZONTALPOSPI_ILIMIT=2 } GuidanceSettingsHorizontalPosPIElem;
/* Number of elements for field HorizontalPosPI */
#define GUIDANCESETTINGS_HORIZONTALPOSPI_NUMELEM 3
// Field HorizontalVelPID information
/* Array element names for field HorizontalVelPID */
typedef enum { GUIDANCESETTINGS_HORIZONTALVELPID_KP=0, GUIDANCESETTINGS_HORIZONTALVELPID_KI=1, GUIDANCESETTINGS_HORIZONTALVELPID_KD=2, GUIDANCESETTINGS_HORIZONTALVELPID_ILIMIT=3 } GuidanceSettingsHorizontalVelPIDElem;
/* Number of elements for field HorizontalVelPID */
#define GUIDANCESETTINGS_HORIZONTALVELPID_NUMELEM 4
// Field VerticalPosPI information
/* Array element names for field VerticalPosPI */
typedef enum { GUIDANCESETTINGS_VERTICALPOSPI_KP=0, GUIDANCESETTINGS_VERTICALPOSPI_KI=1, GUIDANCESETTINGS_VERTICALPOSPI_ILIMIT=2 } GuidanceSettingsVerticalPosPIElem;
/* Number of elements for field VerticalPosPI */
#define GUIDANCESETTINGS_VERTICALPOSPI_NUMELEM 3
// Field VerticalVelPID information
/* Array element names for field VerticalVelPID */
typedef enum { GUIDANCESETTINGS_VERTICALVELPID_KP=0, GUIDANCESETTINGS_VERTICALVELPID_KI=1, GUIDANCESETTINGS_VERTICALVELPID_KD=2, GUIDANCESETTINGS_VERTICALVELPID_ILIMIT=3 } GuidanceSettingsVerticalVelPIDElem;
/* Number of elements for field VerticalVelPID */
#define GUIDANCESETTINGS_VERTICALVELPID_NUMELEM 4
// Field MaxRollPitch information
// Field UpdatePeriod information
// Field HorizontalVelMax information
// Field VerticalVelMax information
// Field GuidanceMode information
/* Enumeration options for field GuidanceMode */
typedef enum { GUIDANCESETTINGS_GUIDANCEMODE_DUAL_LOOP=0, GUIDANCESETTINGS_GUIDANCEMODE_VELOCITY_CONTROL=1 } GuidanceSettingsGuidanceModeOptions;
// Field ThrottleControl information
/* Enumeration options for field ThrottleControl */
typedef enum { GUIDANCESETTINGS_THROTTLECONTROL_FALSE=0, GUIDANCESETTINGS_THROTTLECONTROL_TRUE=1 } GuidanceSettingsThrottleControlOptions;


// Generic interface functions
int32_t GuidanceSettingsInitialize();
UAVObjHandle GuidanceSettingsHandle();
void GuidanceSettingsSetDefaults(UAVObjHandle obj, uint16_t instId);

// set/Get functions
extern void GuidanceSettingsHorizontalPosPISet( float *NewHorizontalPosPI );
extern void GuidanceSettingsHorizontalPosPIGet( float *NewHorizontalPosPI );
extern void GuidanceSettingsHorizontalVelPIDSet( float *NewHorizontalVelPID );
extern void GuidanceSettingsHorizontalVelPIDGet( float *NewHorizontalVelPID );
extern void GuidanceSettingsVerticalPosPISet( float *NewVerticalPosPI );
extern void GuidanceSettingsVerticalPosPIGet( float *NewVerticalPosPI );
extern void GuidanceSettingsVerticalVelPIDSet( float *NewVerticalVelPID );
extern void GuidanceSettingsVerticalVelPIDGet( float *NewVerticalVelPID );
extern void GuidanceSettingsMaxRollPitchSet( float *NewMaxRollPitch );
extern void GuidanceSettingsMaxRollPitchGet( float *NewMaxRollPitch );
extern void GuidanceSettingsUpdatePeriodSet( int32_t *NewUpdatePeriod );
extern void GuidanceSettingsUpdatePeriodGet( int32_t *NewUpdatePeriod );
extern void GuidanceSettingsHorizontalVelMaxSet( uint16_t *NewHorizontalVelMax );
extern void GuidanceSettingsHorizontalVelMaxGet( uint16_t *NewHorizontalVelMax );
extern void GuidanceSettingsVerticalVelMaxSet( uint16_t *NewVerticalVelMax );
extern void GuidanceSettingsVerticalVelMaxGet( uint16_t *NewVerticalVelMax );
extern void GuidanceSettingsGuidanceModeSet( uint8_t *NewGuidanceMode );
extern void GuidanceSettingsGuidanceModeGet( uint8_t *NewGuidanceMode );
extern void GuidanceSettingsThrottleControlSet( uint8_t *NewThrottleControl );
extern void GuidanceSettingsThrottleControlGet( uint8_t *NewThrottleControl );


#endif // GUIDANCESETTINGS_H

/**
 * @}
 * @}
 */
