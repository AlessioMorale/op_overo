/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup FixedWingPathFollowerSettings FixedWingPathFollowerSettings 
 * @brief Settings for the @ref FixedWingPathFollowerModule
 *
 * Autogenerated files and functions for FixedWingPathFollowerSettings Object
 
 * @{ 
 *
 * @file       fixedwingpathfollowersettings.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @brief      Implementation of the FixedWingPathFollowerSettings object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: fixedwingpathfollowersettings.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef FIXEDWINGPATHFOLLOWERSETTINGS_H
#define FIXEDWINGPATHFOLLOWERSETTINGS_H

// Object constants
#define FIXEDWINGPATHFOLLOWERSETTINGS_OBJID 0x8A3F1E02
#define FIXEDWINGPATHFOLLOWERSETTINGS_ISSINGLEINST 1
#define FIXEDWINGPATHFOLLOWERSETTINGS_ISSETTINGS 1
#define FIXEDWINGPATHFOLLOWERSETTINGS_NUMBYTES sizeof(FixedWingPathFollowerSettingsData)

// Object access macros
/**
 * @function FixedWingPathFollowerSettingsGet(dataOut)
 * @brief Populate a FixedWingPathFollowerSettingsData object
 * @param[out] dataOut 
 */
#define FixedWingPathFollowerSettingsGet(dataOut) UAVObjGetData(FixedWingPathFollowerSettingsHandle(), dataOut)
#define FixedWingPathFollowerSettingsSet(dataIn) UAVObjSetData(FixedWingPathFollowerSettingsHandle(), dataIn)
#define FixedWingPathFollowerSettingsInstGet(instId, dataOut) UAVObjGetInstanceData(FixedWingPathFollowerSettingsHandle(), instId, dataOut)
#define FixedWingPathFollowerSettingsInstSet(instId, dataIn) UAVObjSetInstanceData(FixedWingPathFollowerSettingsHandle(), instId, dataIn)
#define FixedWingPathFollowerSettingsConnectQueue(queue) UAVObjConnectQueue(FixedWingPathFollowerSettingsHandle(), queue, EV_MASK_ALL_UPDATES)
#define FixedWingPathFollowerSettingsConnectCallback(cb) UAVObjConnectCallback(FixedWingPathFollowerSettingsHandle(), cb, EV_MASK_ALL_UPDATES)
#define FixedWingPathFollowerSettingsCreateInstance() UAVObjCreateInstance(FixedWingPathFollowerSettingsHandle(),&FixedWingPathFollowerSettingsSetDefaults)
#define FixedWingPathFollowerSettingsRequestUpdate() UAVObjRequestUpdate(FixedWingPathFollowerSettingsHandle())
#define FixedWingPathFollowerSettingsRequestInstUpdate(instId) UAVObjRequestInstanceUpdate(FixedWingPathFollowerSettingsHandle(), instId)
#define FixedWingPathFollowerSettingsUpdated() UAVObjUpdated(FixedWingPathFollowerSettingsHandle())
#define FixedWingPathFollowerSettingsInstUpdated(instId) UAVObjUpdated(FixedWingPathFollowerSettingsHandle(), instId)
#define FixedWingPathFollowerSettingsGetMetadata(dataOut) UAVObjGetMetadata(FixedWingPathFollowerSettingsHandle(), dataOut)
#define FixedWingPathFollowerSettingsSetMetadata(dataIn) UAVObjSetMetadata(FixedWingPathFollowerSettingsHandle(), dataIn)
#define FixedWingPathFollowerSettingsReadOnly() UAVObjReadOnly(FixedWingPathFollowerSettingsHandle())

// Object data
typedef struct {
    float AirSpeedMax;
    float AirSpeedMin;
    float VerticalVelMax;
    float HorizontalPosP;
    float VerticalPosP;
    float CoursePI[3];
    float SpeedP[2];
    float AccelPI[3];
    float VerticalToPitchCrossFeed[2];
    float AirspeedToVerticalCrossFeed[2];
    float PowerPI[3];
    float RollLimit[3];
    float PitchLimit[3];
    float ThrottleLimit[3];
    int32_t UpdatePeriod;

} __attribute__((packed)) FixedWingPathFollowerSettingsData;

// Field information
// Field AirSpeedMax information
// Field AirSpeedMin information
// Field VerticalVelMax information
// Field HorizontalPosP information
// Field VerticalPosP information
// Field CoursePI information
/* Array element names for field CoursePI */
typedef enum { FIXEDWINGPATHFOLLOWERSETTINGS_COURSEPI_KP=0, FIXEDWINGPATHFOLLOWERSETTINGS_COURSEPI_KI=1, FIXEDWINGPATHFOLLOWERSETTINGS_COURSEPI_ILIMIT=2 } FixedWingPathFollowerSettingsCoursePIElem;
/* Number of elements for field CoursePI */
#define FIXEDWINGPATHFOLLOWERSETTINGS_COURSEPI_NUMELEM 3
// Field SpeedP information
/* Array element names for field SpeedP */
typedef enum { FIXEDWINGPATHFOLLOWERSETTINGS_SPEEDP_KP=0, FIXEDWINGPATHFOLLOWERSETTINGS_SPEEDP_MAX=1 } FixedWingPathFollowerSettingsSpeedPElem;
/* Number of elements for field SpeedP */
#define FIXEDWINGPATHFOLLOWERSETTINGS_SPEEDP_NUMELEM 2
// Field AccelPI information
/* Array element names for field AccelPI */
typedef enum { FIXEDWINGPATHFOLLOWERSETTINGS_ACCELPI_KP=0, FIXEDWINGPATHFOLLOWERSETTINGS_ACCELPI_KI=1, FIXEDWINGPATHFOLLOWERSETTINGS_ACCELPI_ILIMIT=2 } FixedWingPathFollowerSettingsAccelPIElem;
/* Number of elements for field AccelPI */
#define FIXEDWINGPATHFOLLOWERSETTINGS_ACCELPI_NUMELEM 3
// Field VerticalToPitchCrossFeed information
/* Array element names for field VerticalToPitchCrossFeed */
typedef enum { FIXEDWINGPATHFOLLOWERSETTINGS_VERTICALTOPITCHCROSSFEED_KP=0, FIXEDWINGPATHFOLLOWERSETTINGS_VERTICALTOPITCHCROSSFEED_MAX=1 } FixedWingPathFollowerSettingsVerticalToPitchCrossFeedElem;
/* Number of elements for field VerticalToPitchCrossFeed */
#define FIXEDWINGPATHFOLLOWERSETTINGS_VERTICALTOPITCHCROSSFEED_NUMELEM 2
// Field AirspeedToVerticalCrossFeed information
/* Array element names for field AirspeedToVerticalCrossFeed */
typedef enum { FIXEDWINGPATHFOLLOWERSETTINGS_AIRSPEEDTOVERTICALCROSSFEED_KP=0, FIXEDWINGPATHFOLLOWERSETTINGS_AIRSPEEDTOVERTICALCROSSFEED_MAX=1 } FixedWingPathFollowerSettingsAirspeedToVerticalCrossFeedElem;
/* Number of elements for field AirspeedToVerticalCrossFeed */
#define FIXEDWINGPATHFOLLOWERSETTINGS_AIRSPEEDTOVERTICALCROSSFEED_NUMELEM 2
// Field PowerPI information
/* Array element names for field PowerPI */
typedef enum { FIXEDWINGPATHFOLLOWERSETTINGS_POWERPI_KP=0, FIXEDWINGPATHFOLLOWERSETTINGS_POWERPI_KI=1, FIXEDWINGPATHFOLLOWERSETTINGS_POWERPI_ILIMIT=2 } FixedWingPathFollowerSettingsPowerPIElem;
/* Number of elements for field PowerPI */
#define FIXEDWINGPATHFOLLOWERSETTINGS_POWERPI_NUMELEM 3
// Field RollLimit information
/* Array element names for field RollLimit */
typedef enum { FIXEDWINGPATHFOLLOWERSETTINGS_ROLLLIMIT_MIN=0, FIXEDWINGPATHFOLLOWERSETTINGS_ROLLLIMIT_NEUTRAL=1, FIXEDWINGPATHFOLLOWERSETTINGS_ROLLLIMIT_MAX=2 } FixedWingPathFollowerSettingsRollLimitElem;
/* Number of elements for field RollLimit */
#define FIXEDWINGPATHFOLLOWERSETTINGS_ROLLLIMIT_NUMELEM 3
// Field PitchLimit information
/* Array element names for field PitchLimit */
typedef enum { FIXEDWINGPATHFOLLOWERSETTINGS_PITCHLIMIT_MIN=0, FIXEDWINGPATHFOLLOWERSETTINGS_PITCHLIMIT_NEUTRAL=1, FIXEDWINGPATHFOLLOWERSETTINGS_PITCHLIMIT_MAX=2 } FixedWingPathFollowerSettingsPitchLimitElem;
/* Number of elements for field PitchLimit */
#define FIXEDWINGPATHFOLLOWERSETTINGS_PITCHLIMIT_NUMELEM 3
// Field ThrottleLimit information
/* Array element names for field ThrottleLimit */
typedef enum { FIXEDWINGPATHFOLLOWERSETTINGS_THROTTLELIMIT_MIN=0, FIXEDWINGPATHFOLLOWERSETTINGS_THROTTLELIMIT_NEUTRAL=1, FIXEDWINGPATHFOLLOWERSETTINGS_THROTTLELIMIT_MAX=2 } FixedWingPathFollowerSettingsThrottleLimitElem;
/* Number of elements for field ThrottleLimit */
#define FIXEDWINGPATHFOLLOWERSETTINGS_THROTTLELIMIT_NUMELEM 3
// Field UpdatePeriod information


// Generic interface functions
int32_t FixedWingPathFollowerSettingsInitialize();
UAVObjHandle FixedWingPathFollowerSettingsHandle();
void FixedWingPathFollowerSettingsSetDefaults(UAVObjHandle obj, uint16_t instId);

// set/Get functions
extern void FixedWingPathFollowerSettingsAirSpeedMaxSet( float *NewAirSpeedMax );
extern void FixedWingPathFollowerSettingsAirSpeedMaxGet( float *NewAirSpeedMax );
extern void FixedWingPathFollowerSettingsAirSpeedMinSet( float *NewAirSpeedMin );
extern void FixedWingPathFollowerSettingsAirSpeedMinGet( float *NewAirSpeedMin );
extern void FixedWingPathFollowerSettingsVerticalVelMaxSet( float *NewVerticalVelMax );
extern void FixedWingPathFollowerSettingsVerticalVelMaxGet( float *NewVerticalVelMax );
extern void FixedWingPathFollowerSettingsHorizontalPosPSet( float *NewHorizontalPosP );
extern void FixedWingPathFollowerSettingsHorizontalPosPGet( float *NewHorizontalPosP );
extern void FixedWingPathFollowerSettingsVerticalPosPSet( float *NewVerticalPosP );
extern void FixedWingPathFollowerSettingsVerticalPosPGet( float *NewVerticalPosP );
extern void FixedWingPathFollowerSettingsCoursePISet( float *NewCoursePI );
extern void FixedWingPathFollowerSettingsCoursePIGet( float *NewCoursePI );
extern void FixedWingPathFollowerSettingsSpeedPSet( float *NewSpeedP );
extern void FixedWingPathFollowerSettingsSpeedPGet( float *NewSpeedP );
extern void FixedWingPathFollowerSettingsAccelPISet( float *NewAccelPI );
extern void FixedWingPathFollowerSettingsAccelPIGet( float *NewAccelPI );
extern void FixedWingPathFollowerSettingsVerticalToPitchCrossFeedSet( float *NewVerticalToPitchCrossFeed );
extern void FixedWingPathFollowerSettingsVerticalToPitchCrossFeedGet( float *NewVerticalToPitchCrossFeed );
extern void FixedWingPathFollowerSettingsAirspeedToVerticalCrossFeedSet( float *NewAirspeedToVerticalCrossFeed );
extern void FixedWingPathFollowerSettingsAirspeedToVerticalCrossFeedGet( float *NewAirspeedToVerticalCrossFeed );
extern void FixedWingPathFollowerSettingsPowerPISet( float *NewPowerPI );
extern void FixedWingPathFollowerSettingsPowerPIGet( float *NewPowerPI );
extern void FixedWingPathFollowerSettingsRollLimitSet( float *NewRollLimit );
extern void FixedWingPathFollowerSettingsRollLimitGet( float *NewRollLimit );
extern void FixedWingPathFollowerSettingsPitchLimitSet( float *NewPitchLimit );
extern void FixedWingPathFollowerSettingsPitchLimitGet( float *NewPitchLimit );
extern void FixedWingPathFollowerSettingsThrottleLimitSet( float *NewThrottleLimit );
extern void FixedWingPathFollowerSettingsThrottleLimitGet( float *NewThrottleLimit );
extern void FixedWingPathFollowerSettingsUpdatePeriodSet( int32_t *NewUpdatePeriod );
extern void FixedWingPathFollowerSettingsUpdatePeriodGet( int32_t *NewUpdatePeriod );


#endif // FIXEDWINGPATHFOLLOWERSETTINGS_H

/**
 * @}
 * @}
 */
