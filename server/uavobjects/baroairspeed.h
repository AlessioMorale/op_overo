/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup BaroAirspeed BaroAirspeed 
 * @brief The raw data from the dynamic pressure sensor with pressure, temperature and airspeed.
 *
 * Autogenerated files and functions for BaroAirspeed Object
 
 * @{ 
 *
 * @file       baroairspeed.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @brief      Implementation of the BaroAirspeed object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: baroairspeed.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef BAROAIRSPEED_H
#define BAROAIRSPEED_H

// Object constants
#define BAROAIRSPEED_OBJID 0x169EA4A
#define BAROAIRSPEED_ISSINGLEINST 1
#define BAROAIRSPEED_ISSETTINGS 0
#define BAROAIRSPEED_NUMBYTES sizeof(BaroAirspeedData)

// Object access macros
/**
 * @function BaroAirspeedGet(dataOut)
 * @brief Populate a BaroAirspeedData object
 * @param[out] dataOut 
 */
#define BaroAirspeedGet(dataOut) UAVObjGetData(BaroAirspeedHandle(), dataOut)
#define BaroAirspeedSet(dataIn) UAVObjSetData(BaroAirspeedHandle(), dataIn)
#define BaroAirspeedInstGet(instId, dataOut) UAVObjGetInstanceData(BaroAirspeedHandle(), instId, dataOut)
#define BaroAirspeedInstSet(instId, dataIn) UAVObjSetInstanceData(BaroAirspeedHandle(), instId, dataIn)
#define BaroAirspeedConnectQueue(queue) UAVObjConnectQueue(BaroAirspeedHandle(), queue, EV_MASK_ALL_UPDATES)
#define BaroAirspeedConnectCallback(cb) UAVObjConnectCallback(BaroAirspeedHandle(), cb, EV_MASK_ALL_UPDATES)
#define BaroAirspeedCreateInstance() UAVObjCreateInstance(BaroAirspeedHandle(),&BaroAirspeedSetDefaults)
#define BaroAirspeedRequestUpdate() UAVObjRequestUpdate(BaroAirspeedHandle())
#define BaroAirspeedRequestInstUpdate(instId) UAVObjRequestInstanceUpdate(BaroAirspeedHandle(), instId)
#define BaroAirspeedUpdated() UAVObjUpdated(BaroAirspeedHandle())
#define BaroAirspeedInstUpdated(instId) UAVObjUpdated(BaroAirspeedHandle(), instId)
#define BaroAirspeedGetMetadata(dataOut) UAVObjGetMetadata(BaroAirspeedHandle(), dataOut)
#define BaroAirspeedSetMetadata(dataIn) UAVObjSetMetadata(BaroAirspeedHandle(), dataIn)
#define BaroAirspeedReadOnly() UAVObjReadOnly(BaroAirspeedHandle())

// Object data
typedef struct {
    float Airspeed;
    uint16_t SensorValue;
    uint16_t ZeroPoint;
    uint8_t Connected;

} __attribute__((packed)) BaroAirspeedData;

// Field information
// Field Airspeed information
// Field SensorValue information
// Field ZeroPoint information
// Field Connected information
/* Enumeration options for field Connected */
typedef enum { BAROAIRSPEED_CONNECTED_FALSE=0, BAROAIRSPEED_CONNECTED_TRUE=1 } BaroAirspeedConnectedOptions;


// Generic interface functions
int32_t BaroAirspeedInitialize();
UAVObjHandle BaroAirspeedHandle();
void BaroAirspeedSetDefaults(UAVObjHandle obj, uint16_t instId);

// set/Get functions
extern void BaroAirspeedAirspeedSet( float *NewAirspeed );
extern void BaroAirspeedAirspeedGet( float *NewAirspeed );
extern void BaroAirspeedSensorValueSet( uint16_t *NewSensorValue );
extern void BaroAirspeedSensorValueGet( uint16_t *NewSensorValue );
extern void BaroAirspeedZeroPointSet( uint16_t *NewZeroPoint );
extern void BaroAirspeedZeroPointGet( uint16_t *NewZeroPoint );
extern void BaroAirspeedConnectedSet( uint8_t *NewConnected );
extern void BaroAirspeedConnectedGet( uint8_t *NewConnected );


#endif // BAROAIRSPEED_H

/**
 * @}
 * @}
 */
