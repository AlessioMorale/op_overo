/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup Magnetometer Magnetometer 
 * @brief The mag data.
 *
 * Autogenerated files and functions for Magnetometer Object
 
 * @{ 
 *
 * @file       magnetometer.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @brief      Implementation of the Magnetometer object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: magnetometer.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef MAGNETOMETER_H
#define MAGNETOMETER_H

// Object constants
#define MAGNETOMETER_OBJID 0x813B55DE
#define MAGNETOMETER_ISSINGLEINST 1
#define MAGNETOMETER_ISSETTINGS 0
#define MAGNETOMETER_NUMBYTES sizeof(MagnetometerData)

// Object access macros
/**
 * @function MagnetometerGet(dataOut)
 * @brief Populate a MagnetometerData object
 * @param[out] dataOut 
 */
#define MagnetometerGet(dataOut) UAVObjGetData(MagnetometerHandle(), dataOut)
#define MagnetometerSet(dataIn) UAVObjSetData(MagnetometerHandle(), dataIn)
#define MagnetometerInstGet(instId, dataOut) UAVObjGetInstanceData(MagnetometerHandle(), instId, dataOut)
#define MagnetometerInstSet(instId, dataIn) UAVObjSetInstanceData(MagnetometerHandle(), instId, dataIn)
#define MagnetometerConnectQueue(queue) UAVObjConnectQueue(MagnetometerHandle(), queue, EV_MASK_ALL_UPDATES)
#define MagnetometerConnectCallback(cb) UAVObjConnectCallback(MagnetometerHandle(), cb, EV_MASK_ALL_UPDATES)
#define MagnetometerCreateInstance() UAVObjCreateInstance(MagnetometerHandle(),&MagnetometerSetDefaults)
#define MagnetometerRequestUpdate() UAVObjRequestUpdate(MagnetometerHandle())
#define MagnetometerRequestInstUpdate(instId) UAVObjRequestInstanceUpdate(MagnetometerHandle(), instId)
#define MagnetometerUpdated() UAVObjUpdated(MagnetometerHandle())
#define MagnetometerInstUpdated(instId) UAVObjUpdated(MagnetometerHandle(), instId)
#define MagnetometerGetMetadata(dataOut) UAVObjGetMetadata(MagnetometerHandle(), dataOut)
#define MagnetometerSetMetadata(dataIn) UAVObjSetMetadata(MagnetometerHandle(), dataIn)
#define MagnetometerReadOnly() UAVObjReadOnly(MagnetometerHandle())

// Object data
typedef struct {
    float x;
    float y;
    float z;

} __attribute__((packed)) MagnetometerData;

// Field information
// Field x information
// Field y information
// Field z information


// Generic interface functions
int32_t MagnetometerInitialize();
UAVObjHandle MagnetometerHandle();
void MagnetometerSetDefaults(UAVObjHandle obj, uint16_t instId);

// set/Get functions
extern void MagnetometerxSet( float *Newx );
extern void MagnetometerxGet( float *Newx );
extern void MagnetometerySet( float *Newy );
extern void MagnetometeryGet( float *Newy );
extern void MagnetometerzSet( float *Newz );
extern void MagnetometerzGet( float *Newz );


#endif // MAGNETOMETER_H

/**
 * @}
 * @}
 */
