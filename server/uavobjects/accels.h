/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup Accels Accels 
 * @brief The accel data.
 *
 * Autogenerated files and functions for Accels Object
 
 * @{ 
 *
 * @file       accels.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @brief      Implementation of the Accels object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: accels.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef ACCELS_H
#define ACCELS_H

// Object constants
#define ACCELS_OBJID 0xDD9D5FC0
#define ACCELS_ISSINGLEINST 1
#define ACCELS_ISSETTINGS 0
#define ACCELS_NUMBYTES sizeof(AccelsData)

// Object access macros
/**
 * @function AccelsGet(dataOut)
 * @brief Populate a AccelsData object
 * @param[out] dataOut 
 */
#define AccelsGet(dataOut) UAVObjGetData(AccelsHandle(), dataOut)
#define AccelsSet(dataIn) UAVObjSetData(AccelsHandle(), dataIn)
#define AccelsInstGet(instId, dataOut) UAVObjGetInstanceData(AccelsHandle(), instId, dataOut)
#define AccelsInstSet(instId, dataIn) UAVObjSetInstanceData(AccelsHandle(), instId, dataIn)
#define AccelsConnectQueue(queue) UAVObjConnectQueue(AccelsHandle(), queue, EV_MASK_ALL_UPDATES)
#define AccelsConnectCallback(cb) UAVObjConnectCallback(AccelsHandle(), cb, EV_MASK_ALL_UPDATES)
#define AccelsCreateInstance() UAVObjCreateInstance(AccelsHandle(),&AccelsSetDefaults)
#define AccelsRequestUpdate() UAVObjRequestUpdate(AccelsHandle())
#define AccelsRequestInstUpdate(instId) UAVObjRequestInstanceUpdate(AccelsHandle(), instId)
#define AccelsUpdated() UAVObjUpdated(AccelsHandle())
#define AccelsInstUpdated(instId) UAVObjUpdated(AccelsHandle(), instId)
#define AccelsGetMetadata(dataOut) UAVObjGetMetadata(AccelsHandle(), dataOut)
#define AccelsSetMetadata(dataIn) UAVObjSetMetadata(AccelsHandle(), dataIn)
#define AccelsReadOnly() UAVObjReadOnly(AccelsHandle())

// Object data
typedef struct {
    float x;
    float y;
    float z;
    float temperature;

} __attribute__((packed)) AccelsData;

// Field information
// Field x information
// Field y information
// Field z information
// Field temperature information


// Generic interface functions
int32_t AccelsInitialize();
UAVObjHandle AccelsHandle();
void AccelsSetDefaults(UAVObjHandle obj, uint16_t instId);

// set/Get functions
extern void AccelsxSet( float *Newx );
extern void AccelsxGet( float *Newx );
extern void AccelsySet( float *Newy );
extern void AccelsyGet( float *Newy );
extern void AccelszSet( float *Newz );
extern void AccelszGet( float *Newz );
extern void AccelstemperatureSet( float *Newtemperature );
extern void AccelstemperatureGet( float *Newtemperature );


#endif // ACCELS_H

/**
 * @}
 * @}
 */
